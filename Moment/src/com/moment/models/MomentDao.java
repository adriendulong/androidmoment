package com.moment.models;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;
import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table moments.
*/
public class MomentDao extends AbstractDao<Moment, Void> {

    public static final String TABLENAME = "moments";

    /**
     * Properties of entity Moment.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Integer.class, "id", false, "ID");
        public final static Property State = new Property(1, Integer.class, "state", false, "STATE");
        public final static Property GuestNumber = new Property(2, Integer.class, "guestNumber", false, "GUEST_NUMBER");
        public final static Property GuestComing = new Property(3, Integer.class, "guestComing", false, "GUEST_COMING");
        public final static Property GuestNotComing = new Property(4, Integer.class, "guestNotComing", false, "GUEST_NOT_COMING");
        public final static Property Privacy = new Property(5, Integer.class, "privacy", false, "PRIVACY");
        public final static Property Name = new Property(6, String.class, "name", false, "NAME");
        public final static Property Description = new Property(7, String.class, "description", false, "DESCRIPTION");
        public final static Property PlaceInformations = new Property(8, String.class, "placeInformations", false, "PLACE_INFORMATIONS");
        public final static Property InfoTransport = new Property(9, String.class, "infoTransport", false, "INFO_TRANSPORT");
        public final static Property Hashtag = new Property(10, String.class, "hashtag", false, "HASHTAG");
        public final static Property Adresse = new Property(11, String.class, "adresse", false, "ADRESSE");
        public final static Property KeyBitmap = new Property(12, String.class, "keyBitmap", false, "KEY_BITMAP");
        public final static Property UrlCover = new Property(13, String.class, "urlCover", false, "URL_COVER");
        public final static Property DateDebut = new Property(14, java.util.Date.class, "dateDebut", false, "DATE_DEBUT");
        public final static Property DateFin = new Property(15, java.util.Date.class, "dateFin", false, "DATE_FIN");
        public final static Property IsOpenInvit = new Property(16, Boolean.class, "isOpenInvit", false, "IS_OPEN_INVIT");
    };


    public MomentDao(DaoConfig config) {
        super(config);
    }
    
    public MomentDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'moments' (" + //
                "'ID' INTEGER," + // 0: id
                "'STATE' INTEGER," + // 1: state
                "'GUEST_NUMBER' INTEGER," + // 2: guestNumber
                "'GUEST_COMING' INTEGER," + // 3: guestComing
                "'GUEST_NOT_COMING' INTEGER," + // 4: guestNotComing
                "'PRIVACY' INTEGER," + // 5: privacy
                "'NAME' TEXT," + // 6: name
                "'DESCRIPTION' TEXT," + // 7: description
                "'PLACE_INFORMATIONS' TEXT," + // 8: placeInformations
                "'INFO_TRANSPORT' TEXT," + // 9: infoTransport
                "'HASHTAG' TEXT," + // 10: hashtag
                "'ADRESSE' TEXT," + // 11: adresse
                "'KEY_BITMAP' TEXT," + // 12: keyBitmap
                "'URL_COVER' TEXT," + // 13: urlCover
                "'DATE_DEBUT' INTEGER," + // 14: dateDebut
                "'DATE_FIN' INTEGER," + // 15: dateFin
                "'IS_OPEN_INVIT' INTEGER);"); // 16: isOpenInvit
        // Add Indexes
        db.execSQL("CREATE INDEX " + constraint + "IDX_moments_ID ON moments" +
                " (ID);");
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'moments'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Moment entity) {
        stmt.clearBindings();
 
        Integer id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Integer state = entity.getState();
        if (state != null) {
            stmt.bindLong(2, state);
        }
 
        Integer guestNumber = entity.getGuestNumber();
        if (guestNumber != null) {
            stmt.bindLong(3, guestNumber);
        }
 
        Integer guestComing = entity.getGuestComing();
        if (guestComing != null) {
            stmt.bindLong(4, guestComing);
        }
 
        Integer guestNotComing = entity.getGuestNotComing();
        if (guestNotComing != null) {
            stmt.bindLong(5, guestNotComing);
        }
 
        Integer privacy = entity.getPrivacy();
        if (privacy != null) {
            stmt.bindLong(6, privacy);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(7, name);
        }
 
        String description = entity.getDescription();
        if (description != null) {
            stmt.bindString(8, description);
        }
 
        String placeInformations = entity.getPlaceInformations();
        if (placeInformations != null) {
            stmt.bindString(9, placeInformations);
        }
 
        String infoTransport = entity.getInfoTransport();
        if (infoTransport != null) {
            stmt.bindString(10, infoTransport);
        }
 
        String hashtag = entity.getHashtag();
        if (hashtag != null) {
            stmt.bindString(11, hashtag);
        }
 
        String adresse = entity.getAdresse();
        if (adresse != null) {
            stmt.bindString(12, adresse);
        }
 
        String keyBitmap = entity.getKeyBitmap();
        if (keyBitmap != null) {
            stmt.bindString(13, keyBitmap);
        }
 
        String urlCover = entity.getUrlCover();
        if (urlCover != null) {
            stmt.bindString(14, urlCover);
        }
 
        java.util.Date dateDebut = entity.getDateDebut();
        if (dateDebut != null) {
            stmt.bindLong(15, dateDebut.getTime());
        }
 
        java.util.Date dateFin = entity.getDateFin();
        if (dateFin != null) {
            stmt.bindLong(16, dateFin.getTime());
        }
 
        Boolean isOpenInvit = entity.getIsOpenInvit();
        if (isOpenInvit != null) {
            stmt.bindLong(17, isOpenInvit ? 1l: 0l);
        }
    }

    /** @inheritdoc */
    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    /** @inheritdoc */
    @Override
    public Moment readEntity(Cursor cursor, int offset) {
        Moment entity = new Moment( //
            cursor.isNull(offset + 0) ? null : cursor.getInt(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // state
            cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // guestNumber
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // guestComing
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // guestNotComing
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // privacy
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // name
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // description
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // placeInformations
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // infoTransport
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // hashtag
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // adresse
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // keyBitmap
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // urlCover
            cursor.isNull(offset + 14) ? null : new java.util.Date(cursor.getLong(offset + 14)), // dateDebut
            cursor.isNull(offset + 15) ? null : new java.util.Date(cursor.getLong(offset + 15)), // dateFin
            cursor.isNull(offset + 16) ? null : cursor.getShort(offset + 16) != 0 // isOpenInvit
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Moment entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getInt(offset + 0));
        entity.setState(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setGuestNumber(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setGuestComing(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
        entity.setGuestNotComing(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setPrivacy(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
        entity.setName(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setDescription(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setPlaceInformations(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setInfoTransport(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setHashtag(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setAdresse(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setKeyBitmap(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setUrlCover(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setDateDebut(cursor.isNull(offset + 14) ? null : new java.util.Date(cursor.getLong(offset + 14)));
        entity.setDateFin(cursor.isNull(offset + 15) ? null : new java.util.Date(cursor.getLong(offset + 15)));
        entity.setIsOpenInvit(cursor.isNull(offset + 16) ? null : cursor.getShort(offset + 16) != 0);
     }
    
    /** @inheritdoc */
    @Override
    protected Void updateKeyAfterInsert(Moment entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    /** @inheritdoc */
    @Override
    public Void getKey(Moment entity) {
        return null;
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}

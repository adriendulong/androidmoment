package com.moment.daogenerator;

import java.util.List;
import com.moment.daogenerator.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
// KEEP INCLUDES END
/**
 * Entity mapped to table users.
 */
public class User {

    private Long id;
    private Integer facebookId;
    private Integer nbFollows;
    private Integer nbFollowers;
    private String email;
    private String secondEmail;
    private String firstName;
    private String lastName;
    private String pictureProfileUrl;
    private String keyBitmap;
    private String numTel;
    private String secondNumTel;
    private String fbPhotoUrl;
    private String idCarnetAdresse;
    private String description;
    private Boolean isSelect;
    private long momentId;
    private long photoId;
    private long chatId;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient UserDao myDao;

    private List<Moment> momentList;
    private List<Photo> photoList;
    private List<Chat> chatList;

    // KEEP FIELDS - put your custom fields here
    // KEEP FIELDS END

    public User() {
    }

    public User(Long id) {
        this.id = id;
    }

    public User(Long id, Integer facebookId, Integer nbFollows, Integer nbFollowers, String email, String secondEmail, String firstName, String lastName, String pictureProfileUrl, String keyBitmap, String numTel, String secondNumTel, String fbPhotoUrl, String idCarnetAdresse, String description, Boolean isSelect, long momentId, long photoId, long chatId) {
        this.id = id;
        this.facebookId = facebookId;
        this.nbFollows = nbFollows;
        this.nbFollowers = nbFollowers;
        this.email = email;
        this.secondEmail = secondEmail;
        this.firstName = firstName;
        this.lastName = lastName;
        this.pictureProfileUrl = pictureProfileUrl;
        this.keyBitmap = keyBitmap;
        this.numTel = numTel;
        this.secondNumTel = secondNumTel;
        this.fbPhotoUrl = fbPhotoUrl;
        this.idCarnetAdresse = idCarnetAdresse;
        this.description = description;
        this.isSelect = isSelect;
        this.momentId = momentId;
        this.photoId = photoId;
        this.chatId = chatId;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getUserDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public Integer getFacebookId() {
        return facebookId;
    }

    public void setFacebookId(Integer facebookId) {
        this.facebookId = facebookId;
    }

    public Integer getNbFollows() {
        return nbFollows;
    }

    public void setNbFollows(Integer nbFollows) {
        this.nbFollows = nbFollows;
    }

    public Integer getNbFollowers() {
        return nbFollowers;
    }

    public void setNbFollowers(Integer nbFollowers) {
        this.nbFollowers = nbFollowers;
    }

    public String getEmail() {
        return email;
    }

    public void setEmail(String email) {
        this.email = email;
    }

    public String getSecondEmail() {
        return secondEmail;
    }

    public void setSecondEmail(String secondEmail) {
        this.secondEmail = secondEmail;
    }

    public String getFirstName() {
        return firstName;
    }

    public void setFirstName(String firstName) {
        this.firstName = firstName;
    }

    public String getLastName() {
        return lastName;
    }

    public void setLastName(String lastName) {
        this.lastName = lastName;
    }

    public String getPictureProfileUrl() {
        return pictureProfileUrl;
    }

    public void setPictureProfileUrl(String pictureProfileUrl) {
        this.pictureProfileUrl = pictureProfileUrl;
    }

    public String getKeyBitmap() {
        return keyBitmap;
    }

    public void setKeyBitmap(String keyBitmap) {
        this.keyBitmap = keyBitmap;
    }

    public String getNumTel() {
        return numTel;
    }

    public void setNumTel(String numTel) {
        this.numTel = numTel;
    }

    public String getSecondNumTel() {
        return secondNumTel;
    }

    public void setSecondNumTel(String secondNumTel) {
        this.secondNumTel = secondNumTel;
    }

    public String getFbPhotoUrl() {
        return fbPhotoUrl;
    }

    public void setFbPhotoUrl(String fbPhotoUrl) {
        this.fbPhotoUrl = fbPhotoUrl;
    }

    public String getIdCarnetAdresse() {
        return idCarnetAdresse;
    }

    public void setIdCarnetAdresse(String idCarnetAdresse) {
        this.idCarnetAdresse = idCarnetAdresse;
    }

    public String getDescription() {
        return description;
    }

    public void setDescription(String description) {
        this.description = description;
    }

    public Boolean getIsSelect() {
        return isSelect;
    }

    public void setIsSelect(Boolean isSelect) {
        this.isSelect = isSelect;
    }

    public long getMomentId() {
        return momentId;
    }

    public void setMomentId(long momentId) {
        this.momentId = momentId;
    }

    public long getPhotoId() {
        return photoId;
    }

    public void setPhotoId(long photoId) {
        this.photoId = photoId;
    }

    public long getChatId() {
        return chatId;
    }

    public void setChatId(long chatId) {
        this.chatId = chatId;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<Moment> getMomentList() {
        if (momentList == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            MomentDao targetDao = daoSession.getMomentDao();
            List<Moment> momentListNew = targetDao._queryUser_MomentList(id);
            synchronized (this) {
                if(momentList == null) {
                    momentList = momentListNew;
                }
            }
        }
        return momentList;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetMomentList() {
        momentList = null;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<Photo> getPhotoList() {
        if (photoList == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            PhotoDao targetDao = daoSession.getPhotoDao();
            List<Photo> photoListNew = targetDao._queryUser_PhotoList(id);
            synchronized (this) {
                if(photoList == null) {
                    photoList = photoListNew;
                }
            }
        }
        return photoList;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetPhotoList() {
        photoList = null;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<Chat> getChatList() {
        if (chatList == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            ChatDao targetDao = daoSession.getChatDao();
            List<Chat> chatListNew = targetDao._queryUser_ChatList(id);
            synchronized (this) {
                if(chatList == null) {
                    chatList = chatListNew;
                }
            }
        }
        return chatList;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetChatList() {
        chatList = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

    // KEEP METHODS - put your custom methods here
    // KEEP METHODS END

}
